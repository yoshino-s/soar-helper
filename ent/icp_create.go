// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.yoshino-s.xyz/yoshino-s/icp-lookup/ent/icp"
)

// IcpCreate is the builder for creating a Icp entity.
type IcpCreate struct {
	config
	mutation *IcpMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetHost sets the "host" field.
func (ic *IcpCreate) SetHost(s string) *IcpCreate {
	ic.mutation.SetHost(s)
	return ic
}

// SetCity sets the "city" field.
func (ic *IcpCreate) SetCity(s string) *IcpCreate {
	ic.mutation.SetCity(s)
	return ic
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (ic *IcpCreate) SetNillableCity(s *string) *IcpCreate {
	if s != nil {
		ic.SetCity(*s)
	}
	return ic
}

// SetProvince sets the "province" field.
func (ic *IcpCreate) SetProvince(s string) *IcpCreate {
	ic.mutation.SetProvince(s)
	return ic
}

// SetNillableProvince sets the "province" field if the given value is not nil.
func (ic *IcpCreate) SetNillableProvince(s *string) *IcpCreate {
	if s != nil {
		ic.SetProvince(*s)
	}
	return ic
}

// SetCompany sets the "company" field.
func (ic *IcpCreate) SetCompany(s string) *IcpCreate {
	ic.mutation.SetCompany(s)
	return ic
}

// SetOwner sets the "owner" field.
func (ic *IcpCreate) SetOwner(s string) *IcpCreate {
	ic.mutation.SetOwner(s)
	return ic
}

// SetType sets the "type" field.
func (ic *IcpCreate) SetType(s string) *IcpCreate {
	ic.mutation.SetType(s)
	return ic
}

// SetHomepage sets the "homepage" field.
func (ic *IcpCreate) SetHomepage(s string) *IcpCreate {
	ic.mutation.SetHomepage(s)
	return ic
}

// SetPermit sets the "permit" field.
func (ic *IcpCreate) SetPermit(s string) *IcpCreate {
	ic.mutation.SetPermit(s)
	return ic
}

// SetCreatedAt sets the "created_at" field.
func (ic *IcpCreate) SetCreatedAt(t time.Time) *IcpCreate {
	ic.mutation.SetCreatedAt(t)
	return ic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ic *IcpCreate) SetNillableCreatedAt(t *time.Time) *IcpCreate {
	if t != nil {
		ic.SetCreatedAt(*t)
	}
	return ic
}

// SetUpdatedAt sets the "updated_at" field.
func (ic *IcpCreate) SetUpdatedAt(t time.Time) *IcpCreate {
	ic.mutation.SetUpdatedAt(t)
	return ic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ic *IcpCreate) SetNillableUpdatedAt(t *time.Time) *IcpCreate {
	if t != nil {
		ic.SetUpdatedAt(*t)
	}
	return ic
}

// Mutation returns the IcpMutation object of the builder.
func (ic *IcpCreate) Mutation() *IcpMutation {
	return ic.mutation
}

// Save creates the Icp in the database.
func (ic *IcpCreate) Save(ctx context.Context) (*Icp, error) {
	ic.defaults()
	return withHooks(ctx, ic.sqlSave, ic.mutation, ic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ic *IcpCreate) SaveX(ctx context.Context) *Icp {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *IcpCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *IcpCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ic *IcpCreate) defaults() {
	if _, ok := ic.mutation.City(); !ok {
		v := icp.DefaultCity
		ic.mutation.SetCity(v)
	}
	if _, ok := ic.mutation.Province(); !ok {
		v := icp.DefaultProvince
		ic.mutation.SetProvince(v)
	}
	if _, ok := ic.mutation.CreatedAt(); !ok {
		v := icp.DefaultCreatedAt
		ic.mutation.SetCreatedAt(v)
	}
	if _, ok := ic.mutation.UpdatedAt(); !ok {
		v := icp.DefaultUpdatedAt
		ic.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *IcpCreate) check() error {
	if _, ok := ic.mutation.Host(); !ok {
		return &ValidationError{Name: "host", err: errors.New(`ent: missing required field "Icp.host"`)}
	}
	if _, ok := ic.mutation.City(); !ok {
		return &ValidationError{Name: "city", err: errors.New(`ent: missing required field "Icp.city"`)}
	}
	if _, ok := ic.mutation.Province(); !ok {
		return &ValidationError{Name: "province", err: errors.New(`ent: missing required field "Icp.province"`)}
	}
	if _, ok := ic.mutation.Company(); !ok {
		return &ValidationError{Name: "company", err: errors.New(`ent: missing required field "Icp.company"`)}
	}
	if _, ok := ic.mutation.Owner(); !ok {
		return &ValidationError{Name: "owner", err: errors.New(`ent: missing required field "Icp.owner"`)}
	}
	if _, ok := ic.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Icp.type"`)}
	}
	if _, ok := ic.mutation.Homepage(); !ok {
		return &ValidationError{Name: "homepage", err: errors.New(`ent: missing required field "Icp.homepage"`)}
	}
	if _, ok := ic.mutation.Permit(); !ok {
		return &ValidationError{Name: "permit", err: errors.New(`ent: missing required field "Icp.permit"`)}
	}
	if _, ok := ic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Icp.created_at"`)}
	}
	if _, ok := ic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Icp.updated_at"`)}
	}
	return nil
}

func (ic *IcpCreate) sqlSave(ctx context.Context) (*Icp, error) {
	if err := ic.check(); err != nil {
		return nil, err
	}
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ic.mutation.id = &_node.ID
	ic.mutation.done = true
	return _node, nil
}

func (ic *IcpCreate) createSpec() (*Icp, *sqlgraph.CreateSpec) {
	var (
		_node = &Icp{config: ic.config}
		_spec = sqlgraph.NewCreateSpec(icp.Table, sqlgraph.NewFieldSpec(icp.FieldID, field.TypeInt))
	)
	_spec.OnConflict = ic.conflict
	if value, ok := ic.mutation.Host(); ok {
		_spec.SetField(icp.FieldHost, field.TypeString, value)
		_node.Host = value
	}
	if value, ok := ic.mutation.City(); ok {
		_spec.SetField(icp.FieldCity, field.TypeString, value)
		_node.City = value
	}
	if value, ok := ic.mutation.Province(); ok {
		_spec.SetField(icp.FieldProvince, field.TypeString, value)
		_node.Province = value
	}
	if value, ok := ic.mutation.Company(); ok {
		_spec.SetField(icp.FieldCompany, field.TypeString, value)
		_node.Company = value
	}
	if value, ok := ic.mutation.Owner(); ok {
		_spec.SetField(icp.FieldOwner, field.TypeString, value)
		_node.Owner = value
	}
	if value, ok := ic.mutation.GetType(); ok {
		_spec.SetField(icp.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := ic.mutation.Homepage(); ok {
		_spec.SetField(icp.FieldHomepage, field.TypeString, value)
		_node.Homepage = value
	}
	if value, ok := ic.mutation.Permit(); ok {
		_spec.SetField(icp.FieldPermit, field.TypeString, value)
		_node.Permit = value
	}
	if value, ok := ic.mutation.CreatedAt(); ok {
		_spec.SetField(icp.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ic.mutation.UpdatedAt(); ok {
		_spec.SetField(icp.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Icp.Create().
//		SetHost(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IcpUpsert) {
//			SetHost(v+v).
//		}).
//		Exec(ctx)
func (ic *IcpCreate) OnConflict(opts ...sql.ConflictOption) *IcpUpsertOne {
	ic.conflict = opts
	return &IcpUpsertOne{
		create: ic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Icp.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ic *IcpCreate) OnConflictColumns(columns ...string) *IcpUpsertOne {
	ic.conflict = append(ic.conflict, sql.ConflictColumns(columns...))
	return &IcpUpsertOne{
		create: ic,
	}
}

type (
	// IcpUpsertOne is the builder for "upsert"-ing
	//  one Icp node.
	IcpUpsertOne struct {
		create *IcpCreate
	}

	// IcpUpsert is the "OnConflict" setter.
	IcpUpsert struct {
		*sql.UpdateSet
	}
)

// SetCity sets the "city" field.
func (u *IcpUpsert) SetCity(v string) *IcpUpsert {
	u.Set(icp.FieldCity, v)
	return u
}

// UpdateCity sets the "city" field to the value that was provided on create.
func (u *IcpUpsert) UpdateCity() *IcpUpsert {
	u.SetExcluded(icp.FieldCity)
	return u
}

// SetProvince sets the "province" field.
func (u *IcpUpsert) SetProvince(v string) *IcpUpsert {
	u.Set(icp.FieldProvince, v)
	return u
}

// UpdateProvince sets the "province" field to the value that was provided on create.
func (u *IcpUpsert) UpdateProvince() *IcpUpsert {
	u.SetExcluded(icp.FieldProvince)
	return u
}

// SetCompany sets the "company" field.
func (u *IcpUpsert) SetCompany(v string) *IcpUpsert {
	u.Set(icp.FieldCompany, v)
	return u
}

// UpdateCompany sets the "company" field to the value that was provided on create.
func (u *IcpUpsert) UpdateCompany() *IcpUpsert {
	u.SetExcluded(icp.FieldCompany)
	return u
}

// SetOwner sets the "owner" field.
func (u *IcpUpsert) SetOwner(v string) *IcpUpsert {
	u.Set(icp.FieldOwner, v)
	return u
}

// UpdateOwner sets the "owner" field to the value that was provided on create.
func (u *IcpUpsert) UpdateOwner() *IcpUpsert {
	u.SetExcluded(icp.FieldOwner)
	return u
}

// SetType sets the "type" field.
func (u *IcpUpsert) SetType(v string) *IcpUpsert {
	u.Set(icp.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *IcpUpsert) UpdateType() *IcpUpsert {
	u.SetExcluded(icp.FieldType)
	return u
}

// SetHomepage sets the "homepage" field.
func (u *IcpUpsert) SetHomepage(v string) *IcpUpsert {
	u.Set(icp.FieldHomepage, v)
	return u
}

// UpdateHomepage sets the "homepage" field to the value that was provided on create.
func (u *IcpUpsert) UpdateHomepage() *IcpUpsert {
	u.SetExcluded(icp.FieldHomepage)
	return u
}

// SetPermit sets the "permit" field.
func (u *IcpUpsert) SetPermit(v string) *IcpUpsert {
	u.Set(icp.FieldPermit, v)
	return u
}

// UpdatePermit sets the "permit" field to the value that was provided on create.
func (u *IcpUpsert) UpdatePermit() *IcpUpsert {
	u.SetExcluded(icp.FieldPermit)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *IcpUpsert) SetUpdatedAt(v time.Time) *IcpUpsert {
	u.Set(icp.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *IcpUpsert) UpdateUpdatedAt() *IcpUpsert {
	u.SetExcluded(icp.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Icp.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *IcpUpsertOne) UpdateNewValues() *IcpUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.Host(); exists {
			s.SetIgnore(icp.FieldHost)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(icp.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Icp.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *IcpUpsertOne) Ignore() *IcpUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IcpUpsertOne) DoNothing() *IcpUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IcpCreate.OnConflict
// documentation for more info.
func (u *IcpUpsertOne) Update(set func(*IcpUpsert)) *IcpUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IcpUpsert{UpdateSet: update})
	}))
	return u
}

// SetCity sets the "city" field.
func (u *IcpUpsertOne) SetCity(v string) *IcpUpsertOne {
	return u.Update(func(s *IcpUpsert) {
		s.SetCity(v)
	})
}

// UpdateCity sets the "city" field to the value that was provided on create.
func (u *IcpUpsertOne) UpdateCity() *IcpUpsertOne {
	return u.Update(func(s *IcpUpsert) {
		s.UpdateCity()
	})
}

// SetProvince sets the "province" field.
func (u *IcpUpsertOne) SetProvince(v string) *IcpUpsertOne {
	return u.Update(func(s *IcpUpsert) {
		s.SetProvince(v)
	})
}

// UpdateProvince sets the "province" field to the value that was provided on create.
func (u *IcpUpsertOne) UpdateProvince() *IcpUpsertOne {
	return u.Update(func(s *IcpUpsert) {
		s.UpdateProvince()
	})
}

// SetCompany sets the "company" field.
func (u *IcpUpsertOne) SetCompany(v string) *IcpUpsertOne {
	return u.Update(func(s *IcpUpsert) {
		s.SetCompany(v)
	})
}

// UpdateCompany sets the "company" field to the value that was provided on create.
func (u *IcpUpsertOne) UpdateCompany() *IcpUpsertOne {
	return u.Update(func(s *IcpUpsert) {
		s.UpdateCompany()
	})
}

// SetOwner sets the "owner" field.
func (u *IcpUpsertOne) SetOwner(v string) *IcpUpsertOne {
	return u.Update(func(s *IcpUpsert) {
		s.SetOwner(v)
	})
}

// UpdateOwner sets the "owner" field to the value that was provided on create.
func (u *IcpUpsertOne) UpdateOwner() *IcpUpsertOne {
	return u.Update(func(s *IcpUpsert) {
		s.UpdateOwner()
	})
}

// SetType sets the "type" field.
func (u *IcpUpsertOne) SetType(v string) *IcpUpsertOne {
	return u.Update(func(s *IcpUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *IcpUpsertOne) UpdateType() *IcpUpsertOne {
	return u.Update(func(s *IcpUpsert) {
		s.UpdateType()
	})
}

// SetHomepage sets the "homepage" field.
func (u *IcpUpsertOne) SetHomepage(v string) *IcpUpsertOne {
	return u.Update(func(s *IcpUpsert) {
		s.SetHomepage(v)
	})
}

// UpdateHomepage sets the "homepage" field to the value that was provided on create.
func (u *IcpUpsertOne) UpdateHomepage() *IcpUpsertOne {
	return u.Update(func(s *IcpUpsert) {
		s.UpdateHomepage()
	})
}

// SetPermit sets the "permit" field.
func (u *IcpUpsertOne) SetPermit(v string) *IcpUpsertOne {
	return u.Update(func(s *IcpUpsert) {
		s.SetPermit(v)
	})
}

// UpdatePermit sets the "permit" field to the value that was provided on create.
func (u *IcpUpsertOne) UpdatePermit() *IcpUpsertOne {
	return u.Update(func(s *IcpUpsert) {
		s.UpdatePermit()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *IcpUpsertOne) SetUpdatedAt(v time.Time) *IcpUpsertOne {
	return u.Update(func(s *IcpUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *IcpUpsertOne) UpdateUpdatedAt() *IcpUpsertOne {
	return u.Update(func(s *IcpUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *IcpUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IcpCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IcpUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *IcpUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *IcpUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// IcpCreateBulk is the builder for creating many Icp entities in bulk.
type IcpCreateBulk struct {
	config
	err      error
	builders []*IcpCreate
	conflict []sql.ConflictOption
}

// Save creates the Icp entities in the database.
func (icb *IcpCreateBulk) Save(ctx context.Context) ([]*Icp, error) {
	if icb.err != nil {
		return nil, icb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Icp, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IcpMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = icb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *IcpCreateBulk) SaveX(ctx context.Context) []*Icp {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *IcpCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *IcpCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Icp.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IcpUpsert) {
//			SetHost(v+v).
//		}).
//		Exec(ctx)
func (icb *IcpCreateBulk) OnConflict(opts ...sql.ConflictOption) *IcpUpsertBulk {
	icb.conflict = opts
	return &IcpUpsertBulk{
		create: icb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Icp.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (icb *IcpCreateBulk) OnConflictColumns(columns ...string) *IcpUpsertBulk {
	icb.conflict = append(icb.conflict, sql.ConflictColumns(columns...))
	return &IcpUpsertBulk{
		create: icb,
	}
}

// IcpUpsertBulk is the builder for "upsert"-ing
// a bulk of Icp nodes.
type IcpUpsertBulk struct {
	create *IcpCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Icp.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *IcpUpsertBulk) UpdateNewValues() *IcpUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.Host(); exists {
				s.SetIgnore(icp.FieldHost)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(icp.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Icp.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *IcpUpsertBulk) Ignore() *IcpUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IcpUpsertBulk) DoNothing() *IcpUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IcpCreateBulk.OnConflict
// documentation for more info.
func (u *IcpUpsertBulk) Update(set func(*IcpUpsert)) *IcpUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IcpUpsert{UpdateSet: update})
	}))
	return u
}

// SetCity sets the "city" field.
func (u *IcpUpsertBulk) SetCity(v string) *IcpUpsertBulk {
	return u.Update(func(s *IcpUpsert) {
		s.SetCity(v)
	})
}

// UpdateCity sets the "city" field to the value that was provided on create.
func (u *IcpUpsertBulk) UpdateCity() *IcpUpsertBulk {
	return u.Update(func(s *IcpUpsert) {
		s.UpdateCity()
	})
}

// SetProvince sets the "province" field.
func (u *IcpUpsertBulk) SetProvince(v string) *IcpUpsertBulk {
	return u.Update(func(s *IcpUpsert) {
		s.SetProvince(v)
	})
}

// UpdateProvince sets the "province" field to the value that was provided on create.
func (u *IcpUpsertBulk) UpdateProvince() *IcpUpsertBulk {
	return u.Update(func(s *IcpUpsert) {
		s.UpdateProvince()
	})
}

// SetCompany sets the "company" field.
func (u *IcpUpsertBulk) SetCompany(v string) *IcpUpsertBulk {
	return u.Update(func(s *IcpUpsert) {
		s.SetCompany(v)
	})
}

// UpdateCompany sets the "company" field to the value that was provided on create.
func (u *IcpUpsertBulk) UpdateCompany() *IcpUpsertBulk {
	return u.Update(func(s *IcpUpsert) {
		s.UpdateCompany()
	})
}

// SetOwner sets the "owner" field.
func (u *IcpUpsertBulk) SetOwner(v string) *IcpUpsertBulk {
	return u.Update(func(s *IcpUpsert) {
		s.SetOwner(v)
	})
}

// UpdateOwner sets the "owner" field to the value that was provided on create.
func (u *IcpUpsertBulk) UpdateOwner() *IcpUpsertBulk {
	return u.Update(func(s *IcpUpsert) {
		s.UpdateOwner()
	})
}

// SetType sets the "type" field.
func (u *IcpUpsertBulk) SetType(v string) *IcpUpsertBulk {
	return u.Update(func(s *IcpUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *IcpUpsertBulk) UpdateType() *IcpUpsertBulk {
	return u.Update(func(s *IcpUpsert) {
		s.UpdateType()
	})
}

// SetHomepage sets the "homepage" field.
func (u *IcpUpsertBulk) SetHomepage(v string) *IcpUpsertBulk {
	return u.Update(func(s *IcpUpsert) {
		s.SetHomepage(v)
	})
}

// UpdateHomepage sets the "homepage" field to the value that was provided on create.
func (u *IcpUpsertBulk) UpdateHomepage() *IcpUpsertBulk {
	return u.Update(func(s *IcpUpsert) {
		s.UpdateHomepage()
	})
}

// SetPermit sets the "permit" field.
func (u *IcpUpsertBulk) SetPermit(v string) *IcpUpsertBulk {
	return u.Update(func(s *IcpUpsert) {
		s.SetPermit(v)
	})
}

// UpdatePermit sets the "permit" field to the value that was provided on create.
func (u *IcpUpsertBulk) UpdatePermit() *IcpUpsertBulk {
	return u.Update(func(s *IcpUpsert) {
		s.UpdatePermit()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *IcpUpsertBulk) SetUpdatedAt(v time.Time) *IcpUpsertBulk {
	return u.Update(func(s *IcpUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *IcpUpsertBulk) UpdateUpdatedAt() *IcpUpsertBulk {
	return u.Update(func(s *IcpUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *IcpUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the IcpCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IcpCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IcpUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
