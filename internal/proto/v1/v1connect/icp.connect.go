// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/v1/icp.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	entpb "github.com/yoshino-s/soar-helper/internal/proto/entpb"
	v1 "github.com/yoshino-s/soar-helper/internal/proto/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// IcpQueryServiceName is the fully-qualified name of the IcpQueryService service.
	IcpQueryServiceName = "yoshino_s.soar_helper.v1.IcpQueryService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// IcpQueryServiceQueryProcedure is the fully-qualified name of the IcpQueryService's Query RPC.
	IcpQueryServiceQueryProcedure = "/yoshino_s.soar_helper.v1.IcpQueryService/Query"
	// IcpQueryServiceBatchQueryProcedure is the fully-qualified name of the IcpQueryService's
	// BatchQuery RPC.
	IcpQueryServiceBatchQueryProcedure = "/yoshino_s.soar_helper.v1.IcpQueryService/BatchQuery"
	// IcpQueryServiceStatisticProcedure is the fully-qualified name of the IcpQueryService's Statistic
	// RPC.
	IcpQueryServiceStatisticProcedure = "/yoshino_s.soar_helper.v1.IcpQueryService/Statistic"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	icpQueryServiceServiceDescriptor          = v1.File_proto_v1_icp_proto.Services().ByName("IcpQueryService")
	icpQueryServiceQueryMethodDescriptor      = icpQueryServiceServiceDescriptor.Methods().ByName("Query")
	icpQueryServiceBatchQueryMethodDescriptor = icpQueryServiceServiceDescriptor.Methods().ByName("BatchQuery")
	icpQueryServiceStatisticMethodDescriptor  = icpQueryServiceServiceDescriptor.Methods().ByName("Statistic")
)

// IcpQueryServiceClient is a client for the yoshino_s.soar_helper.v1.IcpQueryService service.
type IcpQueryServiceClient interface {
	Query(context.Context, *connect.Request[v1.QueryRequest]) (*connect.Response[entpb.Icp], error)
	BatchQuery(context.Context, *connect.Request[v1.BatchQueryRequest]) (*connect.Response[v1.BatchQueryResponse], error)
	Statistic(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.StatisticResponse], error)
}

// NewIcpQueryServiceClient constructs a client for the yoshino_s.soar_helper.v1.IcpQueryService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewIcpQueryServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) IcpQueryServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &icpQueryServiceClient{
		query: connect.NewClient[v1.QueryRequest, entpb.Icp](
			httpClient,
			baseURL+IcpQueryServiceQueryProcedure,
			connect.WithSchema(icpQueryServiceQueryMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		batchQuery: connect.NewClient[v1.BatchQueryRequest, v1.BatchQueryResponse](
			httpClient,
			baseURL+IcpQueryServiceBatchQueryProcedure,
			connect.WithSchema(icpQueryServiceBatchQueryMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		statistic: connect.NewClient[emptypb.Empty, v1.StatisticResponse](
			httpClient,
			baseURL+IcpQueryServiceStatisticProcedure,
			connect.WithSchema(icpQueryServiceStatisticMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// icpQueryServiceClient implements IcpQueryServiceClient.
type icpQueryServiceClient struct {
	query      *connect.Client[v1.QueryRequest, entpb.Icp]
	batchQuery *connect.Client[v1.BatchQueryRequest, v1.BatchQueryResponse]
	statistic  *connect.Client[emptypb.Empty, v1.StatisticResponse]
}

// Query calls yoshino_s.soar_helper.v1.IcpQueryService.Query.
func (c *icpQueryServiceClient) Query(ctx context.Context, req *connect.Request[v1.QueryRequest]) (*connect.Response[entpb.Icp], error) {
	return c.query.CallUnary(ctx, req)
}

// BatchQuery calls yoshino_s.soar_helper.v1.IcpQueryService.BatchQuery.
func (c *icpQueryServiceClient) BatchQuery(ctx context.Context, req *connect.Request[v1.BatchQueryRequest]) (*connect.Response[v1.BatchQueryResponse], error) {
	return c.batchQuery.CallUnary(ctx, req)
}

// Statistic calls yoshino_s.soar_helper.v1.IcpQueryService.Statistic.
func (c *icpQueryServiceClient) Statistic(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.StatisticResponse], error) {
	return c.statistic.CallUnary(ctx, req)
}

// IcpQueryServiceHandler is an implementation of the yoshino_s.soar_helper.v1.IcpQueryService
// service.
type IcpQueryServiceHandler interface {
	Query(context.Context, *connect.Request[v1.QueryRequest]) (*connect.Response[entpb.Icp], error)
	BatchQuery(context.Context, *connect.Request[v1.BatchQueryRequest]) (*connect.Response[v1.BatchQueryResponse], error)
	Statistic(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.StatisticResponse], error)
}

// NewIcpQueryServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewIcpQueryServiceHandler(svc IcpQueryServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	icpQueryServiceQueryHandler := connect.NewUnaryHandler(
		IcpQueryServiceQueryProcedure,
		svc.Query,
		connect.WithSchema(icpQueryServiceQueryMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	icpQueryServiceBatchQueryHandler := connect.NewUnaryHandler(
		IcpQueryServiceBatchQueryProcedure,
		svc.BatchQuery,
		connect.WithSchema(icpQueryServiceBatchQueryMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	icpQueryServiceStatisticHandler := connect.NewUnaryHandler(
		IcpQueryServiceStatisticProcedure,
		svc.Statistic,
		connect.WithSchema(icpQueryServiceStatisticMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/yoshino_s.soar_helper.v1.IcpQueryService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case IcpQueryServiceQueryProcedure:
			icpQueryServiceQueryHandler.ServeHTTP(w, r)
		case IcpQueryServiceBatchQueryProcedure:
			icpQueryServiceBatchQueryHandler.ServeHTTP(w, r)
		case IcpQueryServiceStatisticProcedure:
			icpQueryServiceStatisticHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedIcpQueryServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedIcpQueryServiceHandler struct{}

func (UnimplementedIcpQueryServiceHandler) Query(context.Context, *connect.Request[v1.QueryRequest]) (*connect.Response[entpb.Icp], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("yoshino_s.soar_helper.v1.IcpQueryService.Query is not implemented"))
}

func (UnimplementedIcpQueryServiceHandler) BatchQuery(context.Context, *connect.Request[v1.BatchQueryRequest]) (*connect.Response[v1.BatchQueryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("yoshino_s.soar_helper.v1.IcpQueryService.BatchQuery is not implemented"))
}

func (UnimplementedIcpQueryServiceHandler) Statistic(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.StatisticResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("yoshino_s.soar_helper.v1.IcpQueryService.Statistic is not implemented"))
}
