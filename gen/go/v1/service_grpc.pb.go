// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: v1/service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GoTemplateService_Echo_FullMethodName = "/your.service.v1.GoTemplateService/Echo"
)

// GoTemplateServiceClient is the client API for GoTemplateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoTemplateServiceClient interface {
	Echo(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*StringMessage, error)
}

type goTemplateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGoTemplateServiceClient(cc grpc.ClientConnInterface) GoTemplateServiceClient {
	return &goTemplateServiceClient{cc}
}

func (c *goTemplateServiceClient) Echo(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*StringMessage, error) {
	out := new(StringMessage)
	err := c.cc.Invoke(ctx, GoTemplateService_Echo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoTemplateServiceServer is the server API for GoTemplateService service.
// All implementations must embed UnimplementedGoTemplateServiceServer
// for forward compatibility
type GoTemplateServiceServer interface {
	Echo(context.Context, *StringMessage) (*StringMessage, error)
	mustEmbedUnimplementedGoTemplateServiceServer()
}

// UnimplementedGoTemplateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGoTemplateServiceServer struct {
}

func (UnimplementedGoTemplateServiceServer) Echo(context.Context, *StringMessage) (*StringMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (UnimplementedGoTemplateServiceServer) mustEmbedUnimplementedGoTemplateServiceServer() {}

// UnsafeGoTemplateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoTemplateServiceServer will
// result in compilation errors.
type UnsafeGoTemplateServiceServer interface {
	mustEmbedUnimplementedGoTemplateServiceServer()
}

func RegisterGoTemplateServiceServer(s grpc.ServiceRegistrar, srv GoTemplateServiceServer) {
	s.RegisterService(&GoTemplateService_ServiceDesc, srv)
}

func _GoTemplateService_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoTemplateServiceServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoTemplateService_Echo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoTemplateServiceServer).Echo(ctx, req.(*StringMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// GoTemplateService_ServiceDesc is the grpc.ServiceDesc for GoTemplateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoTemplateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "your.service.v1.GoTemplateService",
	HandlerType: (*GoTemplateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _GoTemplateService_Echo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/service.proto",
}
