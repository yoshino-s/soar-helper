// Code generated by ent, DO NOT EDIT.

package icp

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the icp type in the database.
	Label = "icp"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldHost holds the string denoting the host field in the database.
	FieldHost = "host"
	// FieldCity holds the string denoting the city field in the database.
	FieldCity = "city"
	// FieldProvince holds the string denoting the province field in the database.
	FieldProvince = "province"
	// FieldCompany holds the string denoting the company field in the database.
	FieldCompany = "company"
	// FieldOwner holds the string denoting the owner field in the database.
	FieldOwner = "owner"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldHomepage holds the string denoting the homepage field in the database.
	FieldHomepage = "homepage"
	// FieldPermit holds the string denoting the permit field in the database.
	FieldPermit = "permit"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the icp in the database.
	Table = "icps"
)

// Columns holds all SQL columns for icp fields.
var Columns = []string{
	FieldID,
	FieldHost,
	FieldCity,
	FieldProvince,
	FieldCompany,
	FieldOwner,
	FieldType,
	FieldHomepage,
	FieldPermit,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCity holds the default value on creation for the "city" field.
	DefaultCity string
	// DefaultProvince holds the default value on creation for the "province" field.
	DefaultProvince string
	// DefaultType holds the default value on creation for the "type" field.
	DefaultType string
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the Icp queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByHost orders the results by the host field.
func ByHost(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHost, opts...).ToFunc()
}

// ByCity orders the results by the city field.
func ByCity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCity, opts...).ToFunc()
}

// ByProvince orders the results by the province field.
func ByProvince(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProvince, opts...).ToFunc()
}

// ByCompany orders the results by the company field.
func ByCompany(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompany, opts...).ToFunc()
}

// ByOwner orders the results by the owner field.
func ByOwner(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwner, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByHomepage orders the results by the homepage field.
func ByHomepage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHomepage, opts...).ToFunc()
}

// ByPermit orders the results by the permit field.
func ByPermit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPermit, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
