// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/yoshino-s/soar-helper/ent/icp"
)

// Icp is the model entity for the Icp schema.
type Icp struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Host holds the value of the "host" field.
	Host string `json:"host,omitempty"`
	// City holds the value of the "city" field.
	City string `json:"city,omitempty"`
	// Province holds the value of the "province" field.
	Province string `json:"province,omitempty"`
	// Company holds the value of the "company" field.
	Company string `json:"company,omitempty"`
	// Owner holds the value of the "owner" field.
	Owner string `json:"owner,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Homepage holds the value of the "homepage" field.
	Homepage string `json:"homepage,omitempty"`
	// Permit holds the value of the "permit" field.
	Permit string `json:"permit,omitempty"`
	// WebName holds the value of the "webName" field.
	WebName string `json:"webName,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Icp) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case icp.FieldID:
			values[i] = new(sql.NullInt64)
		case icp.FieldHost, icp.FieldCity, icp.FieldProvince, icp.FieldCompany, icp.FieldOwner, icp.FieldType, icp.FieldHomepage, icp.FieldPermit, icp.FieldWebName:
			values[i] = new(sql.NullString)
		case icp.FieldCreatedAt, icp.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Icp fields.
func (i *Icp) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case icp.FieldID:
			value, ok := values[j].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			i.ID = int(value.Int64)
		case icp.FieldHost:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field host", values[j])
			} else if value.Valid {
				i.Host = value.String
			}
		case icp.FieldCity:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field city", values[j])
			} else if value.Valid {
				i.City = value.String
			}
		case icp.FieldProvince:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field province", values[j])
			} else if value.Valid {
				i.Province = value.String
			}
		case icp.FieldCompany:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field company", values[j])
			} else if value.Valid {
				i.Company = value.String
			}
		case icp.FieldOwner:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner", values[j])
			} else if value.Valid {
				i.Owner = value.String
			}
		case icp.FieldType:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[j])
			} else if value.Valid {
				i.Type = value.String
			}
		case icp.FieldHomepage:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field homepage", values[j])
			} else if value.Valid {
				i.Homepage = value.String
			}
		case icp.FieldPermit:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field permit", values[j])
			} else if value.Valid {
				i.Permit = value.String
			}
		case icp.FieldWebName:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field webName", values[j])
			} else if value.Valid {
				i.WebName = value.String
			}
		case icp.FieldCreatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[j])
			} else if value.Valid {
				i.CreatedAt = value.Time
			}
		case icp.FieldUpdatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[j])
			} else if value.Valid {
				i.UpdatedAt = value.Time
			}
		default:
			i.selectValues.Set(columns[j], values[j])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Icp.
// This includes values selected through modifiers, order, etc.
func (i *Icp) Value(name string) (ent.Value, error) {
	return i.selectValues.Get(name)
}

// Update returns a builder for updating this Icp.
// Note that you need to call Icp.Unwrap() before calling this method if this Icp
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Icp) Update() *IcpUpdateOne {
	return NewIcpClient(i.config).UpdateOne(i)
}

// Unwrap unwraps the Icp entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Icp) Unwrap() *Icp {
	_tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Icp is not a transactional entity")
	}
	i.config.driver = _tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Icp) String() string {
	var builder strings.Builder
	builder.WriteString("Icp(")
	builder.WriteString(fmt.Sprintf("id=%v, ", i.ID))
	builder.WriteString("host=")
	builder.WriteString(i.Host)
	builder.WriteString(", ")
	builder.WriteString("city=")
	builder.WriteString(i.City)
	builder.WriteString(", ")
	builder.WriteString("province=")
	builder.WriteString(i.Province)
	builder.WriteString(", ")
	builder.WriteString("company=")
	builder.WriteString(i.Company)
	builder.WriteString(", ")
	builder.WriteString("owner=")
	builder.WriteString(i.Owner)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(i.Type)
	builder.WriteString(", ")
	builder.WriteString("homepage=")
	builder.WriteString(i.Homepage)
	builder.WriteString(", ")
	builder.WriteString("permit=")
	builder.WriteString(i.Permit)
	builder.WriteString(", ")
	builder.WriteString("webName=")
	builder.WriteString(i.WebName)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(i.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(i.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Icps is a parsable slice of Icp.
type Icps []*Icp
