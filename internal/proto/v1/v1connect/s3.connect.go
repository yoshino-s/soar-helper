// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/v1/s3.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/yoshino-s/soar-helper/internal/proto/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// S3ServiceName is the fully-qualified name of the S3Service service.
	S3ServiceName = "yoshino_s.soar_helper.v1.S3Service"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// S3ServiceUploadProcedure is the fully-qualified name of the S3Service's Upload RPC.
	S3ServiceUploadProcedure = "/yoshino_s.soar_helper.v1.S3Service/Upload"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	s3ServiceServiceDescriptor      = v1.File_proto_v1_s3_proto.Services().ByName("S3Service")
	s3ServiceUploadMethodDescriptor = s3ServiceServiceDescriptor.Methods().ByName("Upload")
)

// S3ServiceClient is a client for the yoshino_s.soar_helper.v1.S3Service service.
type S3ServiceClient interface {
	Upload(context.Context, *connect.Request[v1.UploadRequest]) (*connect.Response[v1.UploadResponse], error)
}

// NewS3ServiceClient constructs a client for the yoshino_s.soar_helper.v1.S3Service service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewS3ServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) S3ServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &s3ServiceClient{
		upload: connect.NewClient[v1.UploadRequest, v1.UploadResponse](
			httpClient,
			baseURL+S3ServiceUploadProcedure,
			connect.WithSchema(s3ServiceUploadMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// s3ServiceClient implements S3ServiceClient.
type s3ServiceClient struct {
	upload *connect.Client[v1.UploadRequest, v1.UploadResponse]
}

// Upload calls yoshino_s.soar_helper.v1.S3Service.Upload.
func (c *s3ServiceClient) Upload(ctx context.Context, req *connect.Request[v1.UploadRequest]) (*connect.Response[v1.UploadResponse], error) {
	return c.upload.CallUnary(ctx, req)
}

// S3ServiceHandler is an implementation of the yoshino_s.soar_helper.v1.S3Service service.
type S3ServiceHandler interface {
	Upload(context.Context, *connect.Request[v1.UploadRequest]) (*connect.Response[v1.UploadResponse], error)
}

// NewS3ServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewS3ServiceHandler(svc S3ServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	s3ServiceUploadHandler := connect.NewUnaryHandler(
		S3ServiceUploadProcedure,
		svc.Upload,
		connect.WithSchema(s3ServiceUploadMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/yoshino_s.soar_helper.v1.S3Service/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case S3ServiceUploadProcedure:
			s3ServiceUploadHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedS3ServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedS3ServiceHandler struct{}

func (UnimplementedS3ServiceHandler) Upload(context.Context, *connect.Request[v1.UploadRequest]) (*connect.Response[v1.UploadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("yoshino_s.soar_helper.v1.S3Service.Upload is not implemented"))
}
