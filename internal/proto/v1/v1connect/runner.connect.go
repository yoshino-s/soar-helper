// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/v1/runner.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/yoshino-s/soar-helper/internal/proto/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RunnerServiceName is the fully-qualified name of the RunnerService service.
	RunnerServiceName = "yoshino_s.soar_helper.v1.RunnerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RunnerServiceRunWithoutStreamProcedure is the fully-qualified name of the RunnerService's
	// RunWithoutStream RPC.
	RunnerServiceRunWithoutStreamProcedure = "/yoshino_s.soar_helper.v1.RunnerService/RunWithoutStream"
	// RunnerServiceRunStreamProcedure is the fully-qualified name of the RunnerService's RunStream RPC.
	RunnerServiceRunStreamProcedure = "/yoshino_s.soar_helper.v1.RunnerService/RunStream"
	// RunnerServiceReadFileProcedure is the fully-qualified name of the RunnerService's ReadFile RPC.
	RunnerServiceReadFileProcedure = "/yoshino_s.soar_helper.v1.RunnerService/ReadFile"
	// RunnerServiceWriteFileProcedure is the fully-qualified name of the RunnerService's WriteFile RPC.
	RunnerServiceWriteFileProcedure = "/yoshino_s.soar_helper.v1.RunnerService/WriteFile"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	runnerServiceServiceDescriptor                = v1.File_proto_v1_runner_proto.Services().ByName("RunnerService")
	runnerServiceRunWithoutStreamMethodDescriptor = runnerServiceServiceDescriptor.Methods().ByName("RunWithoutStream")
	runnerServiceRunStreamMethodDescriptor        = runnerServiceServiceDescriptor.Methods().ByName("RunStream")
	runnerServiceReadFileMethodDescriptor         = runnerServiceServiceDescriptor.Methods().ByName("ReadFile")
	runnerServiceWriteFileMethodDescriptor        = runnerServiceServiceDescriptor.Methods().ByName("WriteFile")
)

// RunnerServiceClient is a client for the yoshino_s.soar_helper.v1.RunnerService service.
type RunnerServiceClient interface {
	RunWithoutStream(context.Context, *connect.Request[v1.RunRequest]) (*connect.Response[v1.RunResponse], error)
	RunStream(context.Context, *connect.Request[v1.RunRequest]) (*connect.ServerStreamForClient[v1.RunStreamData], error)
	ReadFile(context.Context, *connect.Request[v1.ReadFileRequest]) (*connect.Response[v1.ReadFileResponse], error)
	WriteFile(context.Context, *connect.Request[v1.WriteFileRequest]) (*connect.Response[v1.WriteFileResponse], error)
}

// NewRunnerServiceClient constructs a client for the yoshino_s.soar_helper.v1.RunnerService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRunnerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RunnerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &runnerServiceClient{
		runWithoutStream: connect.NewClient[v1.RunRequest, v1.RunResponse](
			httpClient,
			baseURL+RunnerServiceRunWithoutStreamProcedure,
			connect.WithSchema(runnerServiceRunWithoutStreamMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		runStream: connect.NewClient[v1.RunRequest, v1.RunStreamData](
			httpClient,
			baseURL+RunnerServiceRunStreamProcedure,
			connect.WithSchema(runnerServiceRunStreamMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		readFile: connect.NewClient[v1.ReadFileRequest, v1.ReadFileResponse](
			httpClient,
			baseURL+RunnerServiceReadFileProcedure,
			connect.WithSchema(runnerServiceReadFileMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		writeFile: connect.NewClient[v1.WriteFileRequest, v1.WriteFileResponse](
			httpClient,
			baseURL+RunnerServiceWriteFileProcedure,
			connect.WithSchema(runnerServiceWriteFileMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// runnerServiceClient implements RunnerServiceClient.
type runnerServiceClient struct {
	runWithoutStream *connect.Client[v1.RunRequest, v1.RunResponse]
	runStream        *connect.Client[v1.RunRequest, v1.RunStreamData]
	readFile         *connect.Client[v1.ReadFileRequest, v1.ReadFileResponse]
	writeFile        *connect.Client[v1.WriteFileRequest, v1.WriteFileResponse]
}

// RunWithoutStream calls yoshino_s.soar_helper.v1.RunnerService.RunWithoutStream.
func (c *runnerServiceClient) RunWithoutStream(ctx context.Context, req *connect.Request[v1.RunRequest]) (*connect.Response[v1.RunResponse], error) {
	return c.runWithoutStream.CallUnary(ctx, req)
}

// RunStream calls yoshino_s.soar_helper.v1.RunnerService.RunStream.
func (c *runnerServiceClient) RunStream(ctx context.Context, req *connect.Request[v1.RunRequest]) (*connect.ServerStreamForClient[v1.RunStreamData], error) {
	return c.runStream.CallServerStream(ctx, req)
}

// ReadFile calls yoshino_s.soar_helper.v1.RunnerService.ReadFile.
func (c *runnerServiceClient) ReadFile(ctx context.Context, req *connect.Request[v1.ReadFileRequest]) (*connect.Response[v1.ReadFileResponse], error) {
	return c.readFile.CallUnary(ctx, req)
}

// WriteFile calls yoshino_s.soar_helper.v1.RunnerService.WriteFile.
func (c *runnerServiceClient) WriteFile(ctx context.Context, req *connect.Request[v1.WriteFileRequest]) (*connect.Response[v1.WriteFileResponse], error) {
	return c.writeFile.CallUnary(ctx, req)
}

// RunnerServiceHandler is an implementation of the yoshino_s.soar_helper.v1.RunnerService service.
type RunnerServiceHandler interface {
	RunWithoutStream(context.Context, *connect.Request[v1.RunRequest]) (*connect.Response[v1.RunResponse], error)
	RunStream(context.Context, *connect.Request[v1.RunRequest], *connect.ServerStream[v1.RunStreamData]) error
	ReadFile(context.Context, *connect.Request[v1.ReadFileRequest]) (*connect.Response[v1.ReadFileResponse], error)
	WriteFile(context.Context, *connect.Request[v1.WriteFileRequest]) (*connect.Response[v1.WriteFileResponse], error)
}

// NewRunnerServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRunnerServiceHandler(svc RunnerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	runnerServiceRunWithoutStreamHandler := connect.NewUnaryHandler(
		RunnerServiceRunWithoutStreamProcedure,
		svc.RunWithoutStream,
		connect.WithSchema(runnerServiceRunWithoutStreamMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	runnerServiceRunStreamHandler := connect.NewServerStreamHandler(
		RunnerServiceRunStreamProcedure,
		svc.RunStream,
		connect.WithSchema(runnerServiceRunStreamMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	runnerServiceReadFileHandler := connect.NewUnaryHandler(
		RunnerServiceReadFileProcedure,
		svc.ReadFile,
		connect.WithSchema(runnerServiceReadFileMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	runnerServiceWriteFileHandler := connect.NewUnaryHandler(
		RunnerServiceWriteFileProcedure,
		svc.WriteFile,
		connect.WithSchema(runnerServiceWriteFileMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/yoshino_s.soar_helper.v1.RunnerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RunnerServiceRunWithoutStreamProcedure:
			runnerServiceRunWithoutStreamHandler.ServeHTTP(w, r)
		case RunnerServiceRunStreamProcedure:
			runnerServiceRunStreamHandler.ServeHTTP(w, r)
		case RunnerServiceReadFileProcedure:
			runnerServiceReadFileHandler.ServeHTTP(w, r)
		case RunnerServiceWriteFileProcedure:
			runnerServiceWriteFileHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRunnerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRunnerServiceHandler struct{}

func (UnimplementedRunnerServiceHandler) RunWithoutStream(context.Context, *connect.Request[v1.RunRequest]) (*connect.Response[v1.RunResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("yoshino_s.soar_helper.v1.RunnerService.RunWithoutStream is not implemented"))
}

func (UnimplementedRunnerServiceHandler) RunStream(context.Context, *connect.Request[v1.RunRequest], *connect.ServerStream[v1.RunStreamData]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("yoshino_s.soar_helper.v1.RunnerService.RunStream is not implemented"))
}

func (UnimplementedRunnerServiceHandler) ReadFile(context.Context, *connect.Request[v1.ReadFileRequest]) (*connect.Response[v1.ReadFileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("yoshino_s.soar_helper.v1.RunnerService.ReadFile is not implemented"))
}

func (UnimplementedRunnerServiceHandler) WriteFile(context.Context, *connect.Request[v1.WriteFileRequest]) (*connect.Response[v1.WriteFileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("yoshino_s.soar_helper.v1.RunnerService.WriteFile is not implemented"))
}
