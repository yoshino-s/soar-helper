// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpbservice

import (
	connect "connectrpc.com/connect"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	errors "github.com/go-errors/errors"
	ent "github.com/yoshino-s/soar-helper/internal/ent"
	entpb "github.com/yoshino-s/soar-helper/internal/proto/entpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// ToProtoIcp transforms the ent type to the pb type
func ToProtoIcp(e *ent.Icp) (*entpb.Icp, error) {
	v := &entpb.Icp{}
	city := wrapperspb.String(e.City)
	v.City = city
	company := wrapperspb.String(e.Company)
	v.Company = company
	created_at := timestamppb.New(e.CreatedAt)
	v.CreatedAt = created_at
	homepage := wrapperspb.String(e.Homepage)
	v.Homepage = homepage
	host := e.Host
	v.Host = host
	id := int32(e.ID)
	v.Id = id
	owner := wrapperspb.String(e.Owner)
	v.Owner = owner
	permit := wrapperspb.String(e.Permit)
	v.Permit = permit
	province := wrapperspb.String(e.Province)
	v.Province = province
	_type := e.Type
	v.Type = _type
	updated_at := timestamppb.New(e.UpdatedAt)
	v.UpdatedAt = updated_at
	webName := wrapperspb.String(e.WebName)
	v.WebName = webName
	return v, nil
}

func WrapProtoIcp(e *ent.Icp, err error) (*entpb.Icp, error) {
	switch {
	case err == nil:
		return ToProtoIcp(e)
	case ent.IsNotFound(err):
		return nil, connect.NewError(connect.CodeNotFound, errors.Errorf("not found: %s", err))
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, connect.NewError(connect.CodeAlreadyExists, errors.Errorf("already exists: %s", err))
	case ent.IsConstraintError(err):
		return nil, connect.NewError(connect.CodeInvalidArgument, errors.Errorf("invalid argument: %s", err))
	default:
		return nil, connect.NewError(connect.CodeInternal, errors.Errorf("internal error: %s", err))
	}
}

// ToProtoIcpList transforms a list of ent type to a list of pb type
func ToProtoIcpList(e []*ent.Icp) ([]*entpb.Icp, error) {
	var pbList []*entpb.Icp
	for _, entEntity := range e {
		pbEntity, err := ToProtoIcp(entEntity)
		if err != nil {
			return nil, connect.NewError(connect.CodeInternal, errors.Errorf("internal error: %s", err))
		}
		pbList = append(pbList, pbEntity)
	}
	return pbList, nil
}

func WrapProtoIcpList(e []*ent.Icp, err error) ([]*entpb.Icp, error) {
	switch {
	case err == nil:
		return ToProtoIcpList(e)
	case ent.IsNotFound(err):
		return nil, connect.NewError(connect.CodeNotFound, errors.Errorf("not found: %s", err))
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, connect.NewError(connect.CodeAlreadyExists, errors.Errorf("already exists: %s", err))
	case ent.IsConstraintError(err):
		return nil, connect.NewError(connect.CodeInvalidArgument, errors.Errorf("invalid argument: %s", err))
	default:
		return nil, connect.NewError(connect.CodeInternal, errors.Errorf("internal error: %s", err))
	}
}
