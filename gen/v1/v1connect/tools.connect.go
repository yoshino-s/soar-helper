// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/tools.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "gitlab.yoshino-s.xyz/yoshino-s/soar-helper/gen/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ToolsServiceName is the fully-qualified name of the ToolsService service.
	ToolsServiceName = "yoshino_s.soar_helper.v1.ToolsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ToolsServiceUnauthorProcedure is the fully-qualified name of the ToolsService's Unauthor RPC.
	ToolsServiceUnauthorProcedure = "/yoshino_s.soar_helper.v1.ToolsService/Unauthor"
	// ToolsServiceHttpxProcedure is the fully-qualified name of the ToolsService's Httpx RPC.
	ToolsServiceHttpxProcedure = "/yoshino_s.soar_helper.v1.ToolsService/Httpx"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	toolsServiceServiceDescriptor        = v1.File_v1_tools_proto.Services().ByName("ToolsService")
	toolsServiceUnauthorMethodDescriptor = toolsServiceServiceDescriptor.Methods().ByName("Unauthor")
	toolsServiceHttpxMethodDescriptor    = toolsServiceServiceDescriptor.Methods().ByName("Httpx")
)

// ToolsServiceClient is a client for the yoshino_s.soar_helper.v1.ToolsService service.
type ToolsServiceClient interface {
	Unauthor(context.Context, *connect.Request[v1.UnauthorRequest]) (*connect.ServerStreamForClient[v1.UnauthorResponse], error)
	Httpx(context.Context, *connect.Request[v1.HttpxRequest]) (*connect.ServerStreamForClient[v1.HttpxResponse], error)
}

// NewToolsServiceClient constructs a client for the yoshino_s.soar_helper.v1.ToolsService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewToolsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ToolsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &toolsServiceClient{
		unauthor: connect.NewClient[v1.UnauthorRequest, v1.UnauthorResponse](
			httpClient,
			baseURL+ToolsServiceUnauthorProcedure,
			connect.WithSchema(toolsServiceUnauthorMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		httpx: connect.NewClient[v1.HttpxRequest, v1.HttpxResponse](
			httpClient,
			baseURL+ToolsServiceHttpxProcedure,
			connect.WithSchema(toolsServiceHttpxMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// toolsServiceClient implements ToolsServiceClient.
type toolsServiceClient struct {
	unauthor *connect.Client[v1.UnauthorRequest, v1.UnauthorResponse]
	httpx    *connect.Client[v1.HttpxRequest, v1.HttpxResponse]
}

// Unauthor calls yoshino_s.soar_helper.v1.ToolsService.Unauthor.
func (c *toolsServiceClient) Unauthor(ctx context.Context, req *connect.Request[v1.UnauthorRequest]) (*connect.ServerStreamForClient[v1.UnauthorResponse], error) {
	return c.unauthor.CallServerStream(ctx, req)
}

// Httpx calls yoshino_s.soar_helper.v1.ToolsService.Httpx.
func (c *toolsServiceClient) Httpx(ctx context.Context, req *connect.Request[v1.HttpxRequest]) (*connect.ServerStreamForClient[v1.HttpxResponse], error) {
	return c.httpx.CallServerStream(ctx, req)
}

// ToolsServiceHandler is an implementation of the yoshino_s.soar_helper.v1.ToolsService service.
type ToolsServiceHandler interface {
	Unauthor(context.Context, *connect.Request[v1.UnauthorRequest], *connect.ServerStream[v1.UnauthorResponse]) error
	Httpx(context.Context, *connect.Request[v1.HttpxRequest], *connect.ServerStream[v1.HttpxResponse]) error
}

// NewToolsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewToolsServiceHandler(svc ToolsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	toolsServiceUnauthorHandler := connect.NewServerStreamHandler(
		ToolsServiceUnauthorProcedure,
		svc.Unauthor,
		connect.WithSchema(toolsServiceUnauthorMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	toolsServiceHttpxHandler := connect.NewServerStreamHandler(
		ToolsServiceHttpxProcedure,
		svc.Httpx,
		connect.WithSchema(toolsServiceHttpxMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/yoshino_s.soar_helper.v1.ToolsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ToolsServiceUnauthorProcedure:
			toolsServiceUnauthorHandler.ServeHTTP(w, r)
		case ToolsServiceHttpxProcedure:
			toolsServiceHttpxHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedToolsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedToolsServiceHandler struct{}

func (UnimplementedToolsServiceHandler) Unauthor(context.Context, *connect.Request[v1.UnauthorRequest], *connect.ServerStream[v1.UnauthorResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("yoshino_s.soar_helper.v1.ToolsService.Unauthor is not implemented"))
}

func (UnimplementedToolsServiceHandler) Httpx(context.Context, *connect.Request[v1.HttpxRequest], *connect.ServerStream[v1.HttpxResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("yoshino_s.soar_helper.v1.ToolsService.Httpx is not implemented"))
}
